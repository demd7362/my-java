package ch19.sec07;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.json.JSONObject;

public class ChatServer {
	ServerSocket serverSocket;
	ExecutorService threadpool = Executors.newFixedThreadPool(100);
	Map<String, SocketClient> chatRoom = Collections.synchronizedMap(new HashMap<>());

	// 서버 시작 메소드
	public void start() throws IOException {
		serverSocket = new ServerSocket(7362); // 포트 바인드
		System.out.println("[서버] 시작됨 -> serverSocket = new ServerSocket(7362);");
		Thread thread = new Thread(() -> {
			try {
				while (true) {
					Socket socket = serverSocket.accept(); // 포트 받아오고,
					SocketClient socketClient = new SocketClient(this, socket);
					// 받아온 포트를 소켓 클라이언트에 정보 주입, I/O 구현, 받아온 포트 ip따옴, receive 메소드 호출
				}
			} catch (Exception e) {

			}
		});
		thread.start();
	}

	
	// 클라이언트 연결 시 SocketClient 생성 및 추가
	public void addSocketClient(SocketClient socketClient) {
		String key = socketClient.chatName+"@"+socketClient.clientIp;
		chatRoom.put(key, socketClient); // map에 주입
		System.out.println("입장: "+key);
		System.out.println("현재 채팅자 수: "+chatRoom.size() +"\n");
	}
	
	// 클라이언트 연결 종료 시 SocketClient 제거
	public void removeSocketClient(SocketClient socketClient) {
		String key = socketClient.chatName+"@"+socketClient.clientIp;
		chatRoom.remove(key);
		System.out.println("나감: "+key);
		System.out.println("현재 채팅자 수: "+chatRoom.size() +"\n");
	}
	
	// 모든 클라이언트에게 메세지 보냄
	public void sendToAll(SocketClient sender,String message) {
		JSONObject root = new JSONObject(); // json 객체 생성
		root.put("clientIp", sender.clientIp);
		root.put("chatName", sender.chatName);
		root.put("message", message);
		String json = root.toString(); // json 정보를 String에 전부 저장
		
		Collection<SocketClient> socketClient = chatRoom.values(); // ?
		for(SocketClient sc : socketClient) {
			if(sc == sender) continue;
			sc.send(json);
		}
	}
}
